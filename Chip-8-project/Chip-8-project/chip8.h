#pragma once
#include <vector>

class Chip8 {
private:
	// CPU components
	unsigned short opcode = 0;  // current opcode

	unsigned char memory[4096] = { 0 };

	unsigned char V[16] = { 0 };  // general purpose registers

	unsigned short I = 0;  // index register
	unsigned short pc = 0;  // program counter

	unsigned char delay_timer = 60;
	unsigned char sound_timer = 60;

	unsigned short stack[16] = { 0 };
	unsigned short sp = 0;  // stack pointer

	unsigned char key[16] = { 0 };

	unsigned char fontset[80] =
	{
		0xF0, 0x90, 0x90, 0x90, 0xF0, // 0
		0x20, 0x60, 0x20, 0x20, 0x70, // 1
		0xF0, 0x10, 0xF0, 0x80, 0xF0, // 2
		0xF0, 0x10, 0xF0, 0x10, 0xF0, // 3
		0x90, 0x90, 0xF0, 0x10, 0x10, // 4
		0xF0, 0x80, 0xF0, 0x10, 0xF0, // 5
		0xF0, 0x80, 0xF0, 0x90, 0xF0, // 6
		0xF0, 0x10, 0x20, 0x40, 0x40, // 7
		0xF0, 0x90, 0xF0, 0x90, 0xF0, // 8
		0xF0, 0x90, 0xF0, 0x10, 0xF0, // 9
		0xF0, 0x90, 0xF0, 0x90, 0x90, // A
		0xE0, 0x90, 0xE0, 0x90, 0xE0, // B
		0xF0, 0x80, 0x80, 0x80, 0xF0, // C
		0xE0, 0x90, 0x90, 0x90, 0xE0, // D
		0xF0, 0x80, 0xF0, 0x80, 0xF0, // E
		0xF0, 0x80, 0xF0, 0x80, 0x80  // F
	};

public:
	unsigned char gfx[64 * 32] = { 0 };

	// Methods
	void clear_display();
	void initialize();

	void loadROM(int file_size, std::vector<char> buffer);
	
	bool draw_flag = false;
	void draw(char VX, char VY, char N);

	void emulateCycle();  // Fetch, decode, execute opcodes & update timers

	void setKeys();
};

